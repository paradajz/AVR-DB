/*
    Copyright 2017-2018 Igor Petrovic

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "Database.h"
#include "../board/Board.h"

///
/// \brief Creates database layout by defining blocks and sections.
///
void Database::createLayout()
{
    DBMS::addBlocks(DB_BLOCKS);

    dbSection_t section;

    {
        //MIDI block

        //midi feature section
        section.numberOfParameters = MIDI_FEATURES;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_MIDI, section);

        //midi channel section
        section.numberOfParameters = MIDI_CHANNELS;
        section.defaultValue = 1;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_MIDI, section);
    }

    {
        //button block

        //type section
        section.numberOfParameters = MAX_NUMBER_OF_BUTTONS+MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_BUTTON, section);

        //midi message type section
        section.numberOfParameters = MAX_NUMBER_OF_BUTTONS+MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_BUTTON, section);

        //midi id section
        section.numberOfParameters = MAX_NUMBER_OF_BUTTONS+MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = true;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_BUTTON, section);
    }

    {
        //encoder block

        //encoder enabled section
        section.numberOfParameters = MAX_NUMBER_OF_ENCODERS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ENCODER, section);

        //encoder inverted section
        section.numberOfParameters = MAX_NUMBER_OF_ENCODERS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ENCODER, section);

        //encoding mode section
        section.numberOfParameters = MAX_NUMBER_OF_ENCODERS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ENCODER, section);

        //midi id section
        section.numberOfParameters = MAX_NUMBER_OF_ENCODERS;
        section.defaultValue = 0;
        section.autoIncrement = true;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ENCODER, section);
    }

    {
        //analog block

        //analog enabled section
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);

        //analog inverted section
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);

        //analog type section
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);

        //midi id section
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = true;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);

        //lower cc limit
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);

        //upper cc limit
        section.numberOfParameters = MAX_NUMBER_OF_ANALOG;
        section.defaultValue = 127;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ANALOG, section);
    }

    {
        //led block

        //hardware parameters section
        section.numberOfParameters = LED_HARDWARE_PARAMETERS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_LED, section);

        //activation id section
        section.numberOfParameters = MAX_NUMBER_OF_LEDS;
        section.defaultValue = 0;
        section.autoIncrement = true;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_LED, section);

        //rgb enabled section
        section.numberOfParameters = MAX_NUMBER_OF_LEDS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_LED, section);

        //local led control enabled section
        section.numberOfParameters = MAX_NUMBER_OF_LEDS;
        section.defaultValue = 0;
        section.autoIncrement = false;
        section.parameterType = BIT_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_LED, section);
    }

    {
        //ID block

        section.numberOfParameters = ID_BYTES;
        section.defaultValue = UNIQUE_ID;
        section.autoIncrement = false;
        section.parameterType = BYTE_PARAMETER;
        section.preserveOnPartialReset = 0;

        DBMS::addSection(DB_BLOCK_ID, section);
    }
}
